!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!g[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===m&&S()}(e,n),t&&t(e,n)};var n,r=!0,o="45c13ab47f00e8dff02d",i=1e4,c={},u=[],a=[];function s(e){var t=O[e];if(!t)return D;var r=function(r){return t.hot.active?(O[r]?-1===O[r].parents.indexOf(e)&&O[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),D(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var i in D)Object.prototype.hasOwnProperty.call(D,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&f("prepare"),m++,D.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===l&&(_[e]||x(e),0===m&&0===v&&S())}},r.t=function(e,t){return 1&t&&(e=r(e)),D.t(e,-2&t)},r}var d=[],l="idle";function f(e){l=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var p,h,y,v=0,m=0,_={},b={},g={};function w(e){return+e+""===e?+e:e}function E(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,f("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=D.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return f("idle"),null;b={},_={},g=e.c,y=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return x(0),"prepare"===l&&0===m&&0===v&&S(),t})}function x(e){g[e]?(b[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=D.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):_[e]=!0}function S(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function j(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,r,i,a,s;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((a=O[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<a.parents.length;u++){var s=a.parents[u],d=O[s];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([s]),moduleId:i,parentId:s};-1===t.indexOf(s)&&(d.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),p(n[s],[i])):(delete n[s],t.push(s),r.push({chain:c.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},m=[],_={},b=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var x;s=w(E);var S=!1,j=!1,P=!1,I="";switch((x=h[E]?d(s):{type:"disposed",moduleId:E}).chain&&(I="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(S=new Error("Aborted because of self decline: "+x.moduleId+I));break;case"declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+I));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(x),t.ignoreUnaccepted||(S=new Error("Aborted because "+s+" is not accepted"+I));break;case"accepted":t.onAccepted&&t.onAccepted(x),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(x),P=!0;break;default:throw new Error("Unexception type "+x.type)}if(S)return f("abort"),Promise.reject(S);if(j)for(s in _[s]=h[s],p(m,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,s)&&(v[s]||(v[s]=[]),p(v[s],x.outdatedDependencies[s]));P&&(p(m,[x.moduleId]),_[s]=b)}var k,A=[];for(r=0;r<m.length;r++)s=m[r],O[s]&&O[s].hot._selfAccepted&&A.push({module:s,errorHandler:O[s].hot._selfAccepted});f("dispose"),Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});for(var q,C,M=m.slice();M.length>0;)if(s=M.pop(),a=O[s]){var B={},H=a.hot._disposeHandlers;for(i=0;i<H.length;i++)(n=H[i])(B);for(c[s]=B,a.hot.active=!1,delete O[s],delete v[s],i=0;i<a.children.length;i++){var N=O[a.children[i]];N&&((k=N.parents.indexOf(s))>=0&&N.parents.splice(k,1))}}for(s in v)if(Object.prototype.hasOwnProperty.call(v,s)&&(a=O[s]))for(C=v[s],i=0;i<C.length;i++)q=C[i],(k=a.children.indexOf(q))>=0&&a.children.splice(k,1);for(s in f("apply"),o=y,_)Object.prototype.hasOwnProperty.call(_,s)&&(e[s]=_[s]);var L=null;for(s in v)if(Object.prototype.hasOwnProperty.call(v,s)&&(a=O[s])){C=v[s];var R=[];for(r=0;r<C.length;r++)if(q=C[r],n=a.hot._acceptedDependencies[q]){if(-1!==R.indexOf(n))continue;R.push(n)}for(r=0;r<R.length;r++){n=R[r];try{n(C)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:C[r],error:e}),t.ignoreErrored||L||(L=e)}}}for(r=0;r<A.length;r++){var U=A[r];s=U.module,u=[s];try{D(s)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:e}),t.ignoreErrored||L||(L=n),L||(L=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||L||(L=e)}}return L?(f("fail"),Promise.reject(L)):(f("idle"),new Promise(function(e){e(m)}))}var O={};function D(t){if(O[t])return O[t].exports;var r=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:E,apply:j,status:function(e){if(!e)return l;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:c[e]};return n=void 0,t}(t),parents:(a=u,u=[],a),children:[]};return e[t].call(r.exports,r,r.exports,s(t)),r.l=!0,r.exports}D.m=e,D.c=O,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(D.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)D.d(n,r,function(t){return e[t]}.bind(null,r));return n},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.h=function(){return o},s(11)(D.s=11)}([function(e){e.exports={API_BASE_URL:"https://free.currencyconverterapi.com/api/v5"}},,,function(e,t,n){},function(e,t,n){"use strict";function r(){document.querySelector("#action").style.display="none"}function o(e){document.querySelector("#action").style.display="inline-block",function(e){function t(){r(),e.postMessage({action:"skipWaiting"})}var n=document.querySelector("#action__dismiss"),o=document.querySelector("#action__reload");n.removeEventListener("click",r),o.removeEventListener("click",t),n.addEventListener("click",r),o.addEventListener("click",t)}(e)}function i(e){e.addEventListener("statechange",function(){"installed"===e.state&&o(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!window.navigator.serviceWorker)return;window.navigator.serviceWorker.register("/currency-converter/sw.js").then(function(e){window.navigator.serviceWorker.controller&&(e.waiting?o(e.waiting):e.installing?i(e.installing):e.addEventListener("updatefound",function(){return i(e.installing)}))}),window.navigator.serviceWorker.addEventListener("controllerchange",function(){return window.location.reload()})}},function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,r){var o,i=new Promise(function(i,c){t(o=e[n].apply(e,r)).then(i,c)});return i.request=o,i}function r(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return n(this[t],o,arguments)})})}function i(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function c(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return function(e,t,r){var o=n(e,t,r);return o.then(function(e){if(e)return new a(e,o.request)})}(this[t],o,arguments)})})}function u(e){this._index=e}function a(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function d(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new d(n)}function f(e){this._db=e}r(u,"_index",["name","keyPath","multiEntry","unique"]),o(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),c(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(a,"_cursor",["direction","key","primaryKey","value"]),o(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(a.prototype[e]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,r),t(n._request).then(function(e){if(e)return new a(e,n._request)})})})}),s.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},r(s,"_store",["name","keyPath","indexNames","autoIncrement"]),o(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),c(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(s,"_store",IDBObjectStore,["deleteIndex"]),d.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},r(d,"_tx",["objectStoreNames","mode"]),i(d,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),i(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new d(this._db.transaction.apply(this._db,arguments))},r(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[s,u].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t=function(e){return Array.prototype.slice.call(e)}(arguments),n=t[t.length-1],r=this._store||this._index,o=r[e].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[u,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var p={open:function(e,t,r){var o=n(indexedDB,"open",[e,t]),i=o.request;return i&&(i.onupgradeneeded=function(e){r&&r(new l(i.result,e.oldVersion,i.transaction))}),o.then(function(e){return new f(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=p,e.exports.default=e.exports}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDb=function(){r.default.open("currencyConverter",1,function(e){e.createObjectStore("rates",{keyPath:"currencyStr"})})},t.addRatesToDB=function(e){r.default.open("currencyConverter").then(function(t){var n=t.transaction("rates","readwrite"),r=n.objectStore("rates");r.put(e)})},t.getRateFromDB=function(e){return r.default.open("currencyConverter").then(function(t){var n=t.transaction("rates","readwrite"),r=n.objectStore("rates");return r.get(e)})};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(5))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return fetch(r.default.API_BASE_URL+"/countries")};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(t){
/*!
Copyright (C) 2015-2017 Andrea Giammarchi - @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
function n(e){var t,n,o,i,c,u,a=Object.create(null);if(this[s]=a,e)if("string"==typeof e)for("?"===e.charAt(0)&&(e=e.slice(1)),c=0,u=(i=e.split("&")).length;c<u;c++)-1<(t=(o=i[c]).indexOf("="))?d(a,l(o.slice(0,t)),l(o.slice(t+1))):o.length&&d(a,l(o),"");else if(r(e))for(c=0,u=e.length;c<u;c++)d(a,(o=e[c])[0],o[1]);else for(n in e)d(a,n,e[n])}var r=Array.isArray,o=n.prototype,i=/[!'\(\)~]|%20|%00/g,c=/\+/g,u={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"},a=function(e){return u[e]},s="__URLSearchParams__:"+Math.random();function d(e,t,n){t in e?e[t].push(""+n):e[t]=r(n)?n:[""+n]}function l(e){return decodeURIComponent(e.replace(c," "))}function f(e){return encodeURIComponent(e).replace(i,a)}o.append=function(e,t){d(this[s],e,t)},o.delete=function(e){delete this[s][e]},o.get=function(e){var t=this[s];return e in t?t[e][0]:null},o.getAll=function(e){var t=this[s];return e in t?t[e].slice(0):[]},o.has=function(e){return e in this[s]},o.set=function(e,t){this[s][e]=[""+t]},o.forEach=function(e,t){var n=this[s];Object.getOwnPropertyNames(n).forEach(function(r){n[r].forEach(function(n){e.call(t,n,r,this)},this)},this)},o.toJSON=function(){return{}},o.toString=function(){var e,t,n,r,o=this[s],i=[];for(t in o)for(n=f(t),e=0,r=o[t];e<r.length;e++)i.push(n+"="+f(r[e]));return i.join("&")},function(e){var t=function(){try{return!!Symbol.iterator}catch(e){return!1}}();"forEach"in e||(e.forEach=function(e,t){var n=Object.create(null);this.toString().replace(/=[\s\S]*?(?:&|$)/g,"=").split("=").forEach(function(r){!r.length||r in n||(n[r]=this.getAll(r)).forEach(function(n){e.call(t,n,r,this)},this)},this)}),"keys"in e||(e.keys=function(){var e=[];this.forEach(function(t,n){e.push(n)});var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t&&(n[Symbol.iterator]=function(){return n}),n}),"values"in e||(e.values=function(){var e=[];this.forEach(function(t){e.push(t)});var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t&&(n[Symbol.iterator]=function(){return n}),n}),"entries"in e||(e.entries=function(){var e=[];this.forEach(function(t,n){e.push([n,t])});var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t&&(n[Symbol.iterator]=function(){return n}),n}),!t||Symbol.iterator in e||(e[Symbol.iterator]=e.entries),"sort"in e||(e.sort=function(){for(var e,t,n,r=this.entries(),o=r.next(),i=o.done,c=[],u=Object.create(null);!i;)t=(n=o.value)[0],c.push(t),t in u||(u[t]=[]),u[t].push(n[1]),i=(o=r.next()).done;for(c.sort(),e=0;e<c.length;e++)this.delete(c[e]);for(e=0;e<c.length;e++)t=c[e],this.append(t,u[t].shift())})}((n=e.exports=t.URLSearchParams||n).prototype)}).call(this,n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=new r.default;t.append("q",e),t.append("compact","y");var n=o.default.API_BASE_URL+"/convert?"+t.toString();return fetch(n)};var r=i(n(9)),o=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";var r=u(n(10)),o=u(n(7)),i=n(6),c=u(n(4));function u(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=document.querySelector("#error"),n=document.createElement("div");n.textContent=e,t.appendChild(n)}function s(e,t){return e.currencyName<t.currencyName?-1:e.currencyName>t.currencyName?1:0}function d(e){var t=document.createElement("option");return t.text=e.currencyName,t.value=e.currencyId,t}function l(e,t){var n=document.querySelector("#result"),r=(t*e).toFixed(2);n.textContent=r}function f(e,t){(0,i.getRateFromDB)(e).then(function(e){void 0!==e?l(t,e.rate):a("Failed to fetch exchange rates.")})}function p(){!function(){for(var e=document.querySelector("#error");e.firstChild;)e.removeChild(e.firstChild)}(),document.querySelector("#result").textContent="";var e=document.querySelector("#app__amount"),t=document.querySelector("#app__from"),n=document.querySelector("#app__to"),o=e.value;if(o=parseFloat(o),Number.isNaN(o)||o<0)a("Enter a valid value for amount below");else{var c=t.value,u=n.value;if(""!==c&&""!==u){var s=c+"_"+u;(0,r.default)(s).then(function(e){return e.ok?e.json():f(s,o)}).then(function(e){var t=e[s].val;l(o,t),(0,i.addRatesToDB)({currencyStr:s,rate:t})}).catch(function(){a("Kindly check your network connection."),f(s,o)})}else a("Select a valid value for from currency and to currency")}}n(3),(0,c.default)(),(0,i.createDb)(),document.querySelector("#convert").addEventListener("click",function(){p()}),(0,o.default)().then(function(e){return e.json()}).then(function(e){var t=e.results,n=document.querySelector("#app__from"),r=document.querySelector("#app__to");Object.values(t).sort(s).forEach(function(e){r.appendChild(d(e)),n.appendChild(d(e))})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,